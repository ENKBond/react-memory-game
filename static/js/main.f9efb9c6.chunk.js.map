{"version":3,"sources":["components/Title/index.js","components/ImageCard/index.js","components/Counter/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","src","alt","ImageCard","name","image","onClick","handleClick","id","Counter","score","message","App","state","images","shuffle","data","i","length","j","Math","floor","random","temp","resetData","map","item","Object","objectSpread","clicked","_this","handleCorrectGuess","newData","newScore","setState","handleIncorrectGuess","guessedCorrectly","newImages","newItem","_this2","this","components_Title","components_ImageCard","components_Counter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9efb9c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Title = (props) => {\r\nreturn (\r\n    <div className=\"title-bar row\">\r\n        <div className=\"col-4\">\r\n            <img className=\"star\" src=\"assets/star.png\" alt=\"img not found\"/>\r\n        </div>\r\n        <div className=\"col-8\">\r\n            <h1 className=\"title label\">Travel Poster Click Game</h1>\r\n        </div>\r\n        <br></br>\r\n        <h5 className=\"title\">Click on an image to earn points, but don't click on any more than once!</h5>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst ImageCard = props => {\r\n    return (\r\n            <div className=\"img-container\">\r\n                <img alt={props.name} src={props.image} onClick = {() => props.handleClick(props.id)}/>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default ImageCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Counter = props => {\r\n    return (\r\n    <div className=\"card text-center\">\r\n        <div className=\"card-header\">\r\n            Your Score\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <p>{props.score}</p>\r\n            <br/>\r\n            <p>{props.message}</p>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\nimport './App.css';\nimport Title from \"./components/Title\";\nimport ImageCard from \"./components/ImageCard\";\nimport Counter from \"./components/Counter\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n  \n  state = {\n    images,\n    message: \"\",\n    score: 0\n  };\n\n  shuffle = data =>{\n    for(let i=data.length-1; i>0; i--){\n        const j= Math.floor(Math.random() * (i+1))\n        const temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n    }\n    return data;\n }\n\n resetData = data => {\n     const resetData = data.map(item => ({ ...item, clicked: false, message: \"\" }));\n     return this.shuffle(resetData);\n   };\n \n handleCorrectGuess = newData => {\n     const score  = this.state.score;\n     const newScore = score + 1;\n \n     this.setState({\n       images: this.shuffle(newData),\n       score: newScore,\n       message: \"Good job!\"\n     });\n   };\n \n   handleIncorrectGuess = data => {\n     this.setState({\n       images: this.resetData(data),\n       score: 0,\n       message: \"Nope! Try again\"\n     });\n   };\n \n\n\n handleClick = (id) =>{\n     let guessedCorrectly = false;\n     const newImages = this.state.images.map(item => {\n         const newItem = { ...item };\n         if (newItem.id === id) {\n             if (!newItem.clicked) {\n               newItem.clicked = true;\n               guessedCorrectly = true;\n             }\n           }\n           return newItem;\n     });\n     guessedCorrectly? this.handleCorrectGuess(newImages): this.handleIncorrectGuess(newImages);\n\n }\n    \n    \n    render() {\n      return (\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Title/>\n            </div>\n          </div>\n          <div className = \"row\">\n            <div className=\"col-8\">\n            {this.state.images.map(item => (\n              <ImageCard \n                id={item.id}\n                name={item.name}\n                image={item.image}\n                clicked={item.clicked}\n                handleClick={this.handleClick}\n              />\n              ))}\n            </div>\n            <div className=\"col-4\">\n              <Counter \n                score={this.state.score}\n                message={this.state.message}\n                />\n            </div>\n          </div>\n        </div>\n    );\n  }\n  \n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}